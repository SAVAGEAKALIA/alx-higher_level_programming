import doctest
optionflags = doctest.FAIL_FAST | doctest.ELLIPSIS


Testing ``2-matrix_divided`` module
============================

 ``matrix_divided``
--------------------

Import module:
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided


Test Case 1: divide a 2x3 matrix by 2
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 2)
[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

Test Case 2: divide a 3x3 matrix by 3.5
>>> matrix_divided([[10, 20, 30], [40, 50, 60], [70, 80, 90]], 3.5)
[[2.86, 5.71, 8.57], [11.43, 14.29, 17.14], [20.0, 22.86, 25.71]]

Test Case 3: matrix with non-numeric element, should raise TypeError
>>> matrix_divided([[1, 'a', 3], [4, 5, 6]], 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

Test Case 4: matrix with different row sizes, should raise TypeError
>>> matrix_divided([[1, 2, 3], [4, 5], [6, 7, 8]], 2)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

Test Case 5: div is not a number, should raise TypeError
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 'two')
Traceback (most recent call last):
...
TypeError: div must be a number

Test Case 6: div is zero, should raise ValueError
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

Test normal matrix:
>>> matrix_divided([[2, 4, 8], [1, 2, 3]], 2)
[[1.0, 2.0, 4.0], [0.5, 1.0, 1.5]]

Test one el:
>>> matrix_divided([[2]], 2)
[[1.0]]

Test unmodified matrix:
    >>> m = [[2, 4, 8], [1, 2, 3]]
    >>> matrix_divided(m, 2)
    [[1.0, 2.0, 4.0], [0.5, 1.0, 1.5]]
    >>> m[1][1]
    2

Test division by negative:
    >>> matrix_divided([[2, 4, 8], [1, 2, 3]], -3)
    [[-0.67, -1.33, -2.67], [-0.33, -0.67, -1.0]]

Test division by inf:
    >>> matrix_divided([[2, 4, 8], [1, 2, 3]], float('inf'))
    [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

Test division by nan:
    >>> matrix_divided([[2, 4, 8], [1, 2, 3]], float('nan'))
    [[nan, nan, nan], [nan, nan, nan]]

Test division by zero:
    >>> matrix_divided([[2, 4, 8], [1, 2, 3]], 0)
    Traceback (most recent call last):
    ...
    ZeroDivisionError: division by zero

Test 1st arg none:
    >>> matrix_divided(none, 1)
    Traceback (most recent call last):
    ...
    NameError: name 'none' is not defined

Test empty matrix:
    >>> matrix_divided([[]], 10)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test matrix with non number
    >>> matrix_divided([[2, 4, 8], [1, "foo", 3]], 2)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test matrix with different rows
    >>> matrix_divided([[2, 4, 8], [1, 3]], 2)
    Traceback (most recent call last):
    ...
    TypeError: Each row of the matrix must have the same size

Test empty matrix more:
    >>> matrix_divided([[], [], []], 10)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats


Test 1st arg str:
    >>> matrix_divided("foo", 1)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats


Test 1st arg empty list:
    >>> matrix_divided([], 1)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test division by non num:
    >>> matrix_divided([[2]], "foo")
    Traceback (most recent call last):
    ...
    TypeError: div must be a number

Test missing 1 arg:
    >>> matrix_divided()
    Traceback (most recent call last):
    ...
    TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
